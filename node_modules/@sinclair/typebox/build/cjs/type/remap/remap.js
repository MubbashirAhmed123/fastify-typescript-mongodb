"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.Remap = Remap;
const index_1 = require("../object/index");
const index_2 = require("../constructor/index");
const index_3 = require("../function/index");
const index_4 = require("../intersect/index");
const index_5 = require("../union/index");
const index_6 = require("../tuple/index");
const index_7 = require("../array/index");
const index_8 = require("../async-iterator/index");
const index_9 = require("../iterator/index");
const index_10 = require("../promise/index");
const index_11 = require("../record/index");
const KindGuard = require("../guard/kind");
const type_1 = require("../clone/type");
function FromProperties(properties, func) {
    return globalThis.Object.getOwnPropertyNames(properties).reduce((result, key) => {
        return { ...result, [key]: Remap(properties[key], func) };
    }, {});
}
function FromTypes(types, callback) {
    return types.map((type) => Remap(type, callback));
}
function FromType(type, callback) {
    return callback(type);
}
/** `[Internal]` Applies a recursive conditional remapping of a type and its sub type constituents */
// prettier-ignore
function Remap(type, callback) {
    // Map incoming type
    const mapped = (0, type_1.CloneType)(FromType(type, callback));
    // Return remapped interior
    return (KindGuard.IsConstructor(type) ? (0, index_2.Constructor)(FromTypes(type.parameters, callback), FromType(type.returns, callback), mapped) :
        KindGuard.IsFunction(type) ? (0, index_3.Function)(FromTypes(type.parameters, callback), FromType(type.returns, callback), mapped) :
            KindGuard.IsIntersect(type) ? (0, index_4.Intersect)(FromTypes(type.allOf, callback), mapped) :
                KindGuard.IsUnion(type) ? (0, index_5.Union)(FromTypes(type.anyOf, callback), mapped) :
                    KindGuard.IsTuple(type) ? (0, index_6.Tuple)(FromTypes(type.items || [], callback), mapped) :
                        KindGuard.IsArray(type) ? (0, index_7.Array)(FromType(type.items, callback), mapped) :
                            KindGuard.IsAsyncIterator(type) ? (0, index_8.AsyncIterator)(FromType(type.items, callback), mapped) :
                                KindGuard.IsIterator(type) ? (0, index_9.Iterator)(FromType(type.items, callback), mapped) :
                                    KindGuard.IsPromise(type) ? (0, index_10.Promise)(FromType(type.items, callback), mapped) :
                                        KindGuard.IsObject(type) ? (0, index_1.Object)(FromProperties(type.properties, callback), mapped) :
                                            KindGuard.IsRecord(type) ? (0, index_11.Record)(FromType((0, index_11.RecordKey)(type), callback), FromType((0, index_11.RecordValue)(type), callback), mapped) :
                                                (0, type_1.CloneType)(mapped));
}
