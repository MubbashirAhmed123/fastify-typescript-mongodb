import { Object } from '../object/index.mjs';
import { Constructor } from '../constructor/index.mjs';
import { Function } from '../function/index.mjs';
import { Intersect } from '../intersect/index.mjs';
import { Union } from '../union/index.mjs';
import { Tuple } from '../tuple/index.mjs';
import { Array } from '../array/index.mjs';
import { AsyncIterator } from '../async-iterator/index.mjs';
import { Iterator } from '../iterator/index.mjs';
import { Promise } from '../promise/index.mjs';
import { Record, RecordKey, RecordValue } from '../record/index.mjs';
import * as KindGuard from '../guard/kind.mjs';
import { CloneType } from '../clone/type.mjs';
function FromProperties(properties, func) {
    return globalThis.Object.getOwnPropertyNames(properties).reduce((result, key) => {
        return { ...result, [key]: Remap(properties[key], func) };
    }, {});
}
function FromTypes(types, callback) {
    return types.map((type) => Remap(type, callback));
}
function FromType(type, callback) {
    return callback(type);
}
/** `[Internal]` Applies a recursive conditional remapping of a type and its sub type constituents */
// prettier-ignore
export function Remap(type, callback) {
    // Map incoming type
    const mapped = CloneType(FromType(type, callback));
    // Return remapped interior
    return (KindGuard.IsConstructor(type) ? Constructor(FromTypes(type.parameters, callback), FromType(type.returns, callback), mapped) :
        KindGuard.IsFunction(type) ? Function(FromTypes(type.parameters, callback), FromType(type.returns, callback), mapped) :
            KindGuard.IsIntersect(type) ? Intersect(FromTypes(type.allOf, callback), mapped) :
                KindGuard.IsUnion(type) ? Union(FromTypes(type.anyOf, callback), mapped) :
                    KindGuard.IsTuple(type) ? Tuple(FromTypes(type.items || [], callback), mapped) :
                        KindGuard.IsArray(type) ? Array(FromType(type.items, callback), mapped) :
                            KindGuard.IsAsyncIterator(type) ? AsyncIterator(FromType(type.items, callback), mapped) :
                                KindGuard.IsIterator(type) ? Iterator(FromType(type.items, callback), mapped) :
                                    KindGuard.IsPromise(type) ? Promise(FromType(type.items, callback), mapped) :
                                        KindGuard.IsObject(type) ? Object(FromProperties(type.properties, callback), mapped) :
                                            KindGuard.IsRecord(type) ? Record(FromType(RecordKey(type), callback), FromType(RecordValue(type), callback), mapped) :
                                                CloneType(mapped));
}
