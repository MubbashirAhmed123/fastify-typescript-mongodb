import type { TSchema } from '../schema/index.mjs';
import type { TArgument } from '../argument/index.mjs';
import { type TNever } from '../never/index.mjs';
import { type TReadonlyOptional } from '../readonly-optional/index.mjs';
import { type TReadonly } from '../readonly/index.mjs';
import { type TOptional } from '../optional/index.mjs';
import { type TRemap, type TMapping as TRemapMapping } from '../remap/index.mjs';
type TInstantiateArgument<Argument extends TArgument, Type extends TSchema, IsArgumentReadonly extends number = Argument extends TReadonly<TSchema> ? 1 : 0, IsArgumentOptional extends number = Argument extends TOptional<TSchema> ? 1 : 0, Result extends TSchema = ([
    IsArgumentReadonly,
    IsArgumentOptional
] extends [1, 1] ? TReadonlyOptional<Type> : [
    IsArgumentReadonly,
    IsArgumentOptional
] extends [0, 1] ? TOptional<Type> : [
    IsArgumentReadonly,
    IsArgumentOptional
] extends [1, 0] ? TReadonly<Type> : Type)> = Result;
interface TInstantiateArguments<Arguments extends TSchema[]> extends TRemapMapping {
    output: (this['input'] extends TArgument<infer Index extends number> ? Index extends keyof Arguments ? Arguments[Index] extends TSchema ? TInstantiateArgument<this['input'], Arguments[Index]> : TNever : TNever : this['input']);
}
/** `[JavaScript]` Instantiates a type with the given parameters */
export type TInstantiate<Type extends TSchema, Arguments extends TSchema[]> = (TRemap<Type, TInstantiateArguments<Arguments>>);
/** `[JavaScript]` Instantiates a type with the given parameters */
export declare function Instantiate<Type extends TSchema, Arguments extends TSchema[]>(type: Type, args: [...Arguments]): TInstantiate<Type, Arguments>;
export {};
