import { Never } from '../never/index.mjs';
import { ReadonlyOptional } from '../readonly-optional/index.mjs';
import { Readonly } from '../readonly/index.mjs';
import { Optional } from '../optional/index.mjs';
import { Remap } from '../remap/index.mjs';
import * as KindGuard from '../guard/kind.mjs';
// prettier-ignore
function InstantiateArgument(argument, type) {
    const isReadonly = KindGuard.IsReadonly(argument);
    const isOptional = KindGuard.IsOptional(argument);
    return (isReadonly && isOptional ? ReadonlyOptional(type) :
        isReadonly && !isOptional ? Readonly(type) :
            !isReadonly && isOptional ? Optional(type) :
                type);
}
/** `[JavaScript]` Instantiates a type with the given parameters */
// prettier-ignore
export function Instantiate(type, args) {
    return Remap(type, (type) => {
        return KindGuard.IsArgument(type)
            ? type.index in args
                ? KindGuard.IsSchema(args[type.index])
                    ? InstantiateArgument(type, args[type.index])
                    : Never()
                : Never()
            : type;
    });
}
